#!/bin/bash
# Principles Automation Pipeline
# Systematic automation for Ray Dalio principles integration with PKM workflows

# Configuration
VAULT_DIR="vault"
DAILY_DIR="$VAULT_DIR/daily"
PRINCIPLES_DIR="$VAULT_DIR/02-projects/13-ray-dalio-principles-system"

# Get current date information
CURRENT_DATE=$(date +%Y-%m-%d)
CURRENT_MONTH=$(date +%Y/%m-$(date +%B | tr '[:upper:]' '[:lower:]'))
CURRENT_DAY=$(date +%u) # 1=Monday, 7=Sunday
CURRENT_WEEK_OF_MONTH=$(date +%-V)

# Utility functions
log_automation() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] PRINCIPLES-AUTO: $1"
}

check_daily_note_exists() {
    local daily_note="$DAILY_DIR/$CURRENT_MONTH/$CURRENT_DATE.md"
    [[ -f "$daily_note" ]]
}

create_daily_note_if_missing() {
    local daily_note="$DAILY_DIR/$CURRENT_MONTH/$CURRENT_DATE.md"
    if [[ ! -f "$daily_note" ]]; then
        mkdir -p "$(dirname "$daily_note")"
        cat > "$daily_note" << EOF
---
date: $CURRENT_DATE
type: daily
tags: [daily-note, principles]
links: []
---

# Daily Note: $CURRENT_DATE

## Principle Focus Areas
*Updated by /principles-morning*

## Decision Points
*Populated by /principles-decision*

## Evening Reflection
*Generated by /principles-evening*

## Learning Extraction
*Systematic insights from today's experiences*

---
EOF
        log_automation "Created daily note: $daily_note"
    fi
}

check_principles_morning_completed() {
    local daily_note="$DAILY_DIR/$CURRENT_MONTH/$CURRENT_DATE.md"
    if [[ -f "$daily_note" ]]; then
        grep -q "## Daily Principle Plan:" "$daily_note"
    else
        return 1
    fi
}

check_principles_evening_completed() {
    local daily_note="$DAILY_DIR/$CURRENT_MONTH/$CURRENT_DATE.md"
    if [[ -f "$daily_note" ]]; then
        grep -q "## Evening Principle Reflection:" "$daily_note"
    else
        return 1
    fi
}

# Main automation functions
auto_morning_setup() {
    log_automation "Starting morning principles automation"
    
    # Ensure daily note exists
    create_daily_note_if_missing
    
    # Check if morning planning already completed
    if check_principles_morning_completed; then
        log_automation "Morning principles planning already completed today"
        return 0
    fi
    
    # Create morning reminder
    local daily_note="$DAILY_DIR/$CURRENT_MONTH/$CURRENT_DATE.md"
    echo "" >> "$daily_note"
    echo "## ðŸŒ… Morning Principles Reminder" >> "$daily_note"
    echo "Run: \`/principles-morning\` to start systematic daily planning" >> "$daily_note"
    echo "- Review calendar for decision opportunities" >> "$daily_note"
    echo "- Select relevant principles for today's challenges" >> "$daily_note"
    echo "- Prepare decision frameworks for anticipated choices" >> "$daily_note"
    echo "" >> "$daily_note"
    
    log_automation "Added morning principles reminder to daily note"
}

auto_evening_setup() {
    log_automation "Starting evening principles automation"
    
    # Check if evening reflection already completed
    if check_principles_evening_completed; then
        log_automation "Evening principles reflection already completed today"
        return 0
    fi
    
    # Create evening reminder
    local daily_note="$DAILY_DIR/$CURRENT_MONTH/$CURRENT_DATE.md"
    echo "" >> "$daily_note"
    echo "## ðŸŒ† Evening Principles Reminder" >> "$daily_note"
    echo "Run: \`/principles-evening\` to complete systematic daily reflection" >> "$daily_note"
    echo "- Review today's principle applications and effectiveness" >> "$daily_note"
    echo "- Apply Pain + Reflection = Progress to challenges" >> "$daily_note"
    echo "- Extract learning and insights for tomorrow" >> "$daily_note"
    echo "" >> "$daily_note"
    
    log_automation "Added evening principles reminder to daily note"
}

auto_weekly_setup() {
    log_automation "Starting weekly principles automation"
    
    # Only run on Sundays
    if [[ $CURRENT_DAY -ne 7 ]]; then
        return 0
    fi
    
    # Check if weekly analysis already exists
    local week_start=$(date -d "last monday" +%Y-%m-%d)
    local weekly_analysis="$PRINCIPLES_DIR/analysis/weekly-analysis-$week_start.md"
    
    if [[ -f "$weekly_analysis" ]]; then
        log_automation "Weekly analysis already exists for week of $week_start"
        return 0
    fi
    
    # Create weekly analysis reminder
    local daily_note="$DAILY_DIR/$CURRENT_MONTH/$CURRENT_DATE.md"
    echo "" >> "$daily_note"
    echo "## ðŸ“Š Weekly Principles Analysis Reminder" >> "$daily_note"
    echo "Run: \`/principles-weekly\` to conduct comprehensive weekly review" >> "$daily_note"
    echo "- Analyze principle effectiveness across personal/work/family domains" >> "$daily_note"
    echo "- Identify cross-domain patterns and insights" >> "$daily_note"
    echo "- Generate evolution recommendations for next week" >> "$daily_note"
    echo "" >> "$daily_note"
    
    log_automation "Added weekly analysis reminder to Sunday daily note"
}

auto_quarterly_setup() {
    log_automation "Starting quarterly principles automation"
    
    # Only run on first day of quarter (roughly)
    local day_of_month=$(date +%-d)
    local month=$(date +%-m)
    
    # Check if this is roughly start of quarter (first week of Jan, Apr, Jul, Oct)
    if [[ $day_of_month -le 7 ]] && [[ $month -eq 1 || $month -eq 4 || $month -eq 7 || $month -eq 10 ]]; then
        local quarter="Q$((($month-1)/3+1))"
        local year=$(date +%Y)
        local quarterly_review="$PRINCIPLES_DIR/evolution/quarterly-review-$year-$quarter.md"
        
        if [[ -f "$quarterly_review" ]]; then
            log_automation "Quarterly review already exists for $year $quarter"
            return 0
        fi
        
        # Create quarterly review reminder
        local daily_note="$DAILY_DIR/$CURRENT_MONTH/$CURRENT_DATE.md"
        echo "" >> "$daily_note"
        echo "## ðŸ”„ Quarterly Principles Evolution Reminder" >> "$daily_note"
        echo "Run: \`/principles-quarterly\` to conduct comprehensive quarterly review" >> "$daily_note"
        echo "- 90-day performance assessment across all domains" >> "$daily_note"
        echo "- Stakeholder feedback integration and analysis" >> "$daily_note"
        echo "- Systematic principle refinement and evolution planning" >> "$daily_note"
        echo "" >> "$daily_note"
        
        log_automation "Added quarterly review reminder to daily note"
    fi
}

create_principles_directory_structure() {
    log_automation "Ensuring principles directory structure exists"
    
    mkdir -p "$PRINCIPLES_DIR/analysis"
    mkdir -p "$PRINCIPLES_DIR/decisions"
    mkdir -p "$PRINCIPLES_DIR/evolution"
    mkdir -p "$PRINCIPLES_DIR/tracking"
    
    # Create index files if they don't exist
    local analysis_index="$PRINCIPLES_DIR/analysis/README.md"
    if [[ ! -f "$analysis_index" ]]; then
        cat > "$analysis_index" << EOF
# Principles Analysis Directory

This directory contains systematic analysis of principle effectiveness:

- **Weekly Analysis**: Pattern recognition and cross-domain insights
- **Decision Tracking**: Outcomes and effectiveness of principle-based decisions
- **Learning Integration**: Systematic capture of insights and principle evolution

## Usage
- Weekly analysis generated by \`/principles-weekly\`
- Decision tracking populated by \`/principles-decision\`
- Learning integration managed by \`/principles-evening\`

---
*Auto-generated by principles automation system*
EOF
    fi
    
    local decisions_index="$PRINCIPLES_DIR/decisions/README.md"
    if [[ ! -f "$decisions_index" ]]; then
        cat > "$decisions_index" << EOF
# Principles Decision Tracking

This directory contains systematic decision-making records:

- **Decision Frameworks**: Populated templates with systematic analysis
- **Outcome Tracking**: Results and effectiveness measurement
- **Learning Extraction**: Insights gained from decision experiences

## Structure
- \`YYYY-MM-DD-decision-name.md\`: Individual decision records
- \`monthly-summaries/\`: Monthly decision quality assessments
- \`patterns/\`: Recurring decision pattern analysis

---
*Auto-generated by principles automation system*
EOF
    fi
    
    local evolution_index="$PRINCIPLES_DIR/evolution/README.md"
    if [[ ! -f "$evolution_index" ]]; then
        cat > "$evolution_index" << EOF
# Principles Evolution Tracking

This directory contains principle system evolution records:

- **Quarterly Reviews**: Comprehensive system assessment and evolution planning
- **Refinement History**: How principles have been modified over time
- **Stakeholder Feedback**: Input from family, colleagues, and mentors

## Structure
- \`quarterly-review-YYYY-QN.md\`: Comprehensive quarterly assessments
- \`refinements/\`: Principle modification history
- \`stakeholder-feedback/\`: Collected input and integration

---
*Auto-generated by principles automation system*
EOF
    fi
}

# Main automation execution
main() {
    local automation_type="${1:-auto}"
    
    log_automation "Starting principles automation pipeline (type: $automation_type)"
    
    # Ensure directory structure exists
    create_principles_directory_structure
    
    case "$automation_type" in
        "morning")
            auto_morning_setup
            ;;
        "evening") 
            auto_evening_setup
            ;;
        "weekly")
            auto_weekly_setup
            ;;
        "quarterly")
            auto_quarterly_setup
            ;;
        "auto"|*)
            # Run all appropriate automations based on time/context
            auto_morning_setup
            auto_evening_setup
            auto_weekly_setup
            auto_quarterly_setup
            ;;
    esac
    
    log_automation "Principles automation pipeline completed"
}

# Execute main function if script is run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi